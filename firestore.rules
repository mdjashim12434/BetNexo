
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    // It safely checks if the user document exists and has the 'Admin' role.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // USERS collection rules
    match /users/{userId} {
      // READ: A user can read their own profile. Admins can read any profile.
      allow read: if request.auth.uid == userId || isAdmin();

      // CREATE: A user can create their own profile document upon signup.
      // The request uid must match the document userId.
      allow create: if request.auth.uid == userId;

      // UPDATE: Admins can update any field.
      // A regular user can only update non-critical fields of their own profile.
      // They are explicitly forbidden from changing their balance, role, or verification status.
      allow update: if isAdmin() || (
        request.auth.uid == userId &&
        !('balance' in request.resource.data) &&
        !('role' in request.resource.data) &&
        !('isVerified' in request.resource.data) &&
        !('emailVerified' in request.resource.data) &&
        !('customUserId' in request.resource.data)
      );

      // DELETE: No one should be able to delete user documents to maintain data integrity.
      allow delete: if false;
    }

    // BETS collection rules
    match /bets/{betId} {
      // READ: Users can read their own bets. Admins can read all bets.
      allow read: if isAdmin() || get(/databases/$(database)/documents/bets/$(betId)).data.userId == request.auth.uid;

      // CREATE: Authenticated users can create bets for themselves under strict conditions.
      // - The bet must be for the logged-in user.
      // - The initial status must be 'pending'.
      // - The bet amount must be a positive number.
      allow create: if request.auth.uid != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.status == 'pending'
                    && request.resource.data.betAmount > 0;

      // UPDATE: Only admins can update the status of a bet (e.g., to 'won', 'lost', 'cancelled').
      allow update: if isAdmin();

      // DELETE: Bet history should be immutable for record-keeping.
      allow delete: if false;
    }

    // TRANSACTIONS collection rules
    match /transactions/{transactionId} {
      // READ: Users can read their own transaction history. Admins can read all transactions.
      allow read: if isAdmin() || get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid;

      // CREATE: Users can create deposit/withdrawal requests for themselves.
      // - The request must be for the logged-in user.
      // - The initial status must be 'pending'.
      // - The amount must be a positive number.
      // - User cannot set admin-only fields like processedAt or processedBy.
      allow create: if request.auth.uid != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.status == 'pending'
                    && request.resource.data.amount > 0
                    && !('processedAt' in request.resource.data)
                    && !('processedBy' in request.resource.data);

      // UPDATE: Only admins can update transactions (to approve or reject and update balance).
      allow update: if isAdmin();

      // DELETE: Transaction history should be immutable.
      allow delete: if false;
    }

    // PAYMENT METHODS collection rules
    match /paymentMethods/{methodId} {
      // READ: Any authenticated user can read the available payment methods.
      allow read: if request.auth.uid != null;

      // WRITE (Create, Update, Delete): Only admins can manage payment methods.
      allow write: if isAdmin();
    }
  }
}
