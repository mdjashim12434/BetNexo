
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection Rules
    match /users/{userId} {
      // Authenticated users can read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Authenticated users can update their own non-critical information.
      // They CANNOT update their own balance or role directly from client side.
      allow update: if request.auth != null && request.auth.uid == userId
                    && !(request.resource.data.balance != resource.data.balance)
                    && !(request.resource.data.role != resource.data.role)
                    && !(request.resource.data.emailVerified != resource.data.emailVerified);

      // Admins can get (read a single document) any user's data.
      allow get: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';

      // Admins can write (create, update, delete) any user's data.
      // Used for balance adjustments by admin and other administrative tasks.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Transactions Collection Rules
    match /transactions/{transactionId} {
      // Rule for CREATING new transaction requests (Deposits/Withdrawals by users)
      // 1. User must be authenticated.
      // 2. The 'userId' in the transaction document must match the authenticated user's ID.
      // 3. The 'status' of a new transaction must be 'pending'.
      // 4. Ensure 'type' is either 'deposit' or 'withdrawal'.
      // 5. Ensure 'amount' is a positive number.
      // 6. 'requestedAt' should be set using serverTimestamp.
      allow create: if request.auth != null
                    && request.auth.uid == request.resource.data.userId
                    && request.resource.data.status == 'pending'
                    && (request.resource.data.type == 'deposit' || request.resource.data.type == 'withdrawal')
                    && request.resource.data.amount > 0
                    && request.resource.data.requestedAt == request.time; // Ensures server timestamp

      // Rule for READING transactions
      // Users can read their own transactions.
      // Admins can read (list/get) all transactions.
      allow read: if (request.auth != null && request.auth.uid == resource.data.userId)
                  || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');

      // Rule for UPDATING transactions (Primarily for Admins to Approve/Reject)
      // 1. User must be authenticated AND be an Admin.
      // 2. Admin can ONLY write to 'status' and 'processedAt' fields during an update.
      // 3. The new 'status' must be 'approved' or 'rejected'.
      // 4. 'processedAt' must be set to the server timestamp.
      allow update: if request.auth != null
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin'
                    && request.writeFields.hasOnly(['status', 'processedAt', 'rejectionReason']) // Allow rejectionReason optionally
                    && (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected')
                    && request.resource.data.processedAt == request.time;

      // Deleting transactions: Generally not recommended.
      // If needed, restrict to Admins under specific conditions.
      allow delete: if false; // Or: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin'; (Use with caution)
    }
  }
}
