
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user's role is Admin.
    // This function can be called in any rule.
    function isAdmin() {
      // It checks the 'role' field in the user's own document in the 'users' collection.
      // The `get()` function securely accesses the document from the server side.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Helper function to check if the currently authenticated user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Who can read user documents?
      // - Admins can read any user's document.
      // - A regular user can only read their own document.
      allow read: if isAdmin() || isOwner(userId);

      // Who can write (create, update, delete) user documents?
      // - Only Admins can write to user documents. This is crucial for security,
      //   as it prevents users from changing their own role or balance.
      allow write: if isAdmin();
    }

    // Rules for the 'bets' collection.
    match /bets/{betId} {
      // Who can read bets?
      // - Admins can read all bets.
      // - A user can only read their own bets (where their UID matches the 'userId' field).
      // `resource.data` refers to the document's data as it exists in Firestore.
      allow read: if isAdmin() || isOwner(resource.data.userId);

      // Who can create bets?
      // - Any authenticated user can create a bet for themselves.
      // The following conditions must be met:
      // 1. The 'userId' in the new bet document must be the UID of the user making the request.
      // 2. The initial 'status' of the bet must be 'pending'.
      // 3. A user cannot set the 'resolvedTimestamp' themselves.
      allow create: if request.auth != null
                    && isOwner(request.resource.data.userId)
                    && request.resource.data.status == 'pending'
                    && request.resource.data.resolvedTimestamp == null;

      // Who can update or delete bets?
      // - Only Admins can update (e.g., to change status to 'won' or 'lost') or delete bets.
      allow update, delete: if isAdmin();
    }

    // Rules for the 'transactions' collection (deposits and withdrawals).
    match /transactions/{transactionId} {
      // Who can read transactions?
      // - Admins can read all transactions.
      // - A user can only read their own transaction history.
      allow read: if isAdmin() || isOwner(resource.data.userId);

      // Who can create transactions (i.e., make a deposit/withdrawal request)?
      // - Any authenticated user can create a transaction request for themselves.
      // The following conditions must be met:
      // 1. The 'userId' must match the creator's UID.
      // 2. The initial 'status' must be 'pending'.
      // 3. A user cannot set the 'processedAt' timestamp or 'processedBy' admin ID.
      allow create: if request.auth != null
                    && isOwner(request.resource.data.userId)
                    && request.resource.data.status == 'pending'
                    && request.resource.data.processedAt == null
                    && request.resource.data.processedBy == null;

      // Who can update or delete transactions?
      // - Only Admins can update (to approve/reject requests) or delete transactions.
      allow update, delete: if isAdmin();
    }

    // Rules for the 'paymentMethods' collection.
    match /paymentMethods/{methodId} {
        // Any authenticated user can read the available payment methods.
        allow read: if request.auth != null;

        // Only Admins can create, update, or delete payment methods.
        allow write: if isAdmin();
    }
  }
}
