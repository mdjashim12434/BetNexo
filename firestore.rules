rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Use exists() to prevent errors if the user document doesn't exist yet.
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users can read their own data, Admins can read anyone's data.
    // Users can create their own user doc on signup, and update some of their own data.
    // Balance can only be changed by Admins or through approved transactions.
    match /users/{userId} {
      allow read: if isAuth() && (isOwner(userId) || isAdmin());
      allow create: if isAuth() && isOwner(userId);
      // User can update their own non-critical data. Balance is protected.
      allow update: if isAuth() && isOwner(userId) && request.resource.data.balance == resource.data.balance; 
      // Admin can update anything.
      allow update: if isAuth() && isAdmin();
      allow delete: if isAuth() && isAdmin();
    }

    // Transactions
    match /transactions/{transactionId} {
      // Users can read their own transactions, Admins can read all.
      allow read: if isAuth() && (isAdmin() || resource.data.userId == request.auth.uid);

      // Users can create a transaction for themselves, but only with 'pending' status.
      // They cannot set fields that should be admin-controlled.
      allow create: if isAuth() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.status == 'pending' &&
                     !('processedAt' in request.resource.data) &&
                     !('processedBy' in request.resource.data);

      // Only Admins can update (approve/reject) transactions.
      allow update, delete: if isAuth() && isAdmin();
    }

    // Bets
    match /bets/{betId} {
      // Users can read their own bets, Admins can read all.
      allow read: if isAuth() && (isAdmin() || resource.data.userId == request.auth.uid);

      // Users can create a bet for themselves with a 'pending' status.
      allow create: if isAuth() &&
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.status == 'pending' &&
                     !('resolvedTimestamp' in request.resource.data) &&
                     !('resolvedTimestamp' in request.resource.data);
      
      // Only Admins can update (resolve) bets.
      allow update, delete: if isAuth() && isAdmin();
    }
    
    // Payment methods can be read by any authenticated user.
    // Only Admins can create, update, or delete them.
    match /paymentMethods/{methodId} {
        allow read: if isAuth();
        allow create, update, delete: if isAuth() && isAdmin();
    }
  }
}
